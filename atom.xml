<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yujava.github.io</id>
    <title>coding-self</title>
    <updated>2020-03-30T00:23:52.602Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yujava.github.io"/>
    <link rel="self" href="https://yujava.github.io/atom.xml"/>
    <subtitle>java自学交流</subtitle>
    <logo>https://yujava.github.io/images/avatar.png</logo>
    <icon>https://yujava.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, coding-self</rights>
    <entry>
        <title type="html"><![CDATA[JAVA语法]]></title>
        <id>https://yujava.github.io/post/java-yufa/</id>
        <link href="https://yujava.github.io/post/java-yufa/">
        </link>
        <updated>2020-03-27T08:52:41.000Z</updated>
        <content type="html"><![CDATA[<p>写在前面的废话：JAVA作为企业级应用开发的首选编程语言，常年位于最流行开发语言排行榜榜首，得益于她面向对象的开发思想以及跨平台的特性（更多特性自行百度），受到广大开发者的追捧。<br>
个人认为，想自学编程的朋友，把JAVA作为入门语言是最明智的选择。<br>
从这篇文章开始我会快速给大家把JAVA涉及的知识点过一遍，自学的朋友可先从网上看免费的教学视频之后再来我这里温故而知新，被知识点卡住了的朋友可与我联系。</p>
<h2 id="java环境">JAVA环境</h2>
<p>由于Java是高级语言，计算机不能像执行指令一样运行JAVA，于是咱们需要搭建JAVA环境（关于环境的搭建大家可自行百度，实在装不上的与我联系），装好环境后，细心的小伙伴会发现，再配置java环境变量的时候有两个关键的配置分别是JDK(Java Development Kit，Java开发工具包)和JRE(Java Runtime Environment，Java运行环境)。</p>
<h3 id="1jdk">1.JDK</h3>
<p>sun公司为方便开发人员编写程序推出的工具包</p>
<pre><code>java.io
java.lang
java.net
java.util
...
</code></pre>
<p>java.io：通过数据流、序列化和文件系统提供系统输入和输出<br>
java.lang：java语言的核心，它提供了java中的基础类。包括基本Object类、Class类、String类、基本类型的包装类、基本的数学类等<br>
java.net：用于网络通讯<br>
java.util：包含collection框架、事件模型、日期和时间设施、国际化和各种实用工具类;字符串标记生成器、随机数生成器和位数组<br>
JDK除了提供丰富的类库以外，其实还包含了JRE，装好JDK的朋友可以去相应的目录下面查看。</p>
<p>大家根据我举例JDK常用包能想象到什么？用这些工具包不就可以做一个简单版的通讯工具吗（微信/QQ）吗，平时我们通过键盘输入文字到微信待发送框内（ java.io），然后点击发送按钮通过网络发送给对方（ java.net），当然这里面还有文字处理（计算机只认识0和1，不认识中文，java.lang）。<br>
到这里是不是找到了JAVA为什么流行的部分原因了！提供丰富的基础操作类库，让开发者只专注于应用程序自身业务即可。</p>
<h3 id="2jre">2.JRE</h3>
<p>让计算机系统运行Java应用程序，JRE的内部有一个Java虚拟机（Java Virtual Machine，JVM）以及一些标准的类别函数库，上一篇文章我们提到java属于高级语言，计算机不认识，需要一个“翻译官”，而jre就提供了“翻译官”的功能。下图展示了，JAVA跨平台的原理。</p>
<figure data-type="image" tabindex="1"><img src="https://yujava.github.io/post-images/1585301288249.png" alt="" loading="lazy"></figure>
<h2 id="开发工具">开发工具</h2>
<p>目前主要使用Eclipse和idea两种，推荐idea，如果网上自学教程用的是Eclipse也没关系，idea不仅比Eclipse更好用，还兼容了Eclipse（比如快捷键）。<br>
有些刚接触全是英文开发工具的朋友会感觉很难用，非常不习惯，我给的建议是，开发工具支持多种语言开发，所以她的功能非常丰富，大家不必像看说明书一样每一个功能都去了解，你想用什么功能就百度什么怎么使用即可。<br>
多使用，多敲代码，你很快就会喜欢并习惯使用她来编码。</p>
<h2 id="hello-word">Hello Word</h2>
<pre><code class="language-java">public class HelloWord {
    public static void main(String[] args) {
        System.out.println(&quot;hello java&quot;);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机常识]]></title>
        <id>https://yujava.github.io/post/compute-base/</id>
        <link href="https://yujava.github.io/post/compute-base/">
        </link>
        <updated>2020-03-27T02:08:01.000Z</updated>
        <content type="html"><![CDATA[<p>写在前面的废话：学习编程为什么要了解计算机原理相关知识，直接学习编程会敲代码不能胜任工作吗？答案是可以的，你只要会写代码可以胜任一般的工作，但是可以肯定的是只会写代码，你在IT行业的职业生涯不会长久。<br>
其实这个问题跟就读培训学校和大学对应专业有点类似，知乎上有个比较有趣的评论，如果你想学会开车，报个驾校即可，但想造汽车，至少得读个大学。<br>
这里举一个我自己自学的例子，我再看完某培训学校《JAVA28天入门》一套视频之后，居然还不知道程序是自上而下顺序执行的。</p>
<p>进入主题，以下内容如有不对之处，欢迎联系指正。</p>
<h2 id="计算机基本原理">计算机基本原理</h2>
<p>众所周知，目前我们使用的计算机（笔记本或台式电脑），是由硬件和软件组合的。</p>
<h3 id="1计算机硬件">1.计算机硬件</h3>
<p>CPU(中央处理器,进行数据运算、传输等所有指令的执行时，都需要按照中央处理器的引导进行，作为整个计算机的心脏，控制这计算机的信息加工所有过程。)</p>
<p>输入输出设备(键盘、摄像机、鼠标以及麦克风等属于输入设备；打印机以及显示器等属于输出设备，显示数据展示给人们看的设备)</p>
<p>存储设备（RAM[random access memory]即随机存储内存，我们常说的内存，这种存储器在断电时将丢失其存储内容，故主要用于存储短时间使用的程序。ROM[Read-Only Memory]即只读内存，我们常说的硬盘，是一种只能读出事先所存数据的固态半导体存储器。）</p>
<h3 id="2计算机软件">2.计算机软件</h3>
<p>系统软件：系统软件是各类操作系统，如windows、Linux、UNIX等，还包括操作系统的补丁程序及硬件驱动程序，都是系统软件类。</p>
<p>系统软件是负责管理计算机系统中各种独立的硬件，使得它们可以协调工作。系统软件使得计算机使用者和其他软件将计算机当作一个整体而不需要顾及到底层每个硬件是如何工作的。</p>
<p>应用软件：工具软件、游戏软件、管理软件等都属于应用软件类。各种应用软件，虽然完成的工作各不相同，但它们都需要一些共同的基础操作，例如都要从输入设备取得数据，向输出设备送出数据，向外存写数据，从外存读数据，对数据的常规管理，等等。<br>
这些基础工作也要由一系列指令来完成。人们把这些指令集中组织在一起，形成专门的软件，用来支持应用软件的运行，这种软件称为系统软件。一般来讲，系统软件包括操作系统和一系列基本的工具（比如编译器，数据库管理，存储器格式化，文件系统管理，用户身份验证，驱动管理，网络连接等方面的工具），是支持计算机系统正常运行并实现用户操作的那部分软件。</p>
<h2 id="编程语言的发展">编程语言的发展</h2>
<p>机器语言（二进制）→汇编语言→高级语言<br>
计算机中指令和数据都用二进制来表示，它只认识0和1这样的数字（二进制数，大家平时看到的黑客大片，上面经常出现电脑屏幕上布满了0和1），为什么是二进制，我这里简要概述一下，电脑的设计思想源于电报机.</p>
<p>早期的电报机是通过控制电灯开关的闭合（0可以表示开关的闭，1可以表示开关的合）来传输信息，聪明的人类可以制定多个0和1组合规则来传达信息。感兴趣的朋友推荐看《编码的奥秘》一书，里面使用通俗易懂的方式讲解了计算机的发展由来。</p>
<figure data-type="image" tabindex="1"><img src="https://yujava.github.io/post-images/1585275520679.png" alt="" loading="lazy"></figure>
<p>使用0和1这样的机器语言好处是CPU认识，可以直接执行，但是对于程序本身来说，没有可读性，难以维护，容易出错。所以就出现了汇编语言，它用助记符(代替操作码指令，用地址符号代替地址码。实际是对机器语言的一种映射，可读性高。</p>
<figure data-type="image" tabindex="2"><img src="https://yujava.github.io/post-images/1585275562900.png" alt="" loading="lazy"></figure>
<p>把汇编语言转换为机器语言需要一个叫做汇编器的工具。对于目前的CPU厂商，在推出的CPU指令时都会同时退出新的汇编器。如果你还在使用老版本的汇编器那么只能使用机器码来使用新的指令了。</p>
<p>汇编语言的出现大大提高了编程效率，但是她的可读性相对来说还是较差，指令繁多复杂，不利于维护，还有一个问题就是不同CPU的指令集可能不同，这样就需要为不同的CPU编写不同的汇编程序。<br>
于是又出现了高级语言比如C，或者是后来的C++,JAVA,C#。 高级语言把多条汇编指令合成成为了一个表达式，并且去除了许多操作细节（比如堆栈操作，寄存器操作），而是以一种更直观的方式来编写程序。<br>
而面向对象的语言的出现使得程序编写更加符合我们的思维方式。我们不必把尽力放到低层的细节上，而更多的关注程序的本身的逻辑的实现。</p>
<h2 id="总结">总结</h2>
<p>计算机是硬件+软件构成，系统软件主要用于协调各硬件工作，并提供更简单的调用方式方便应用软件使用，使应用软件更专注于本身业务的实现。<br>
在JAVA领域大多数从业者都是帮助企业开发满足公司业务需求的应用软件，由于计算机只认识0和1，而开发者（程序员）没法用一大堆的0和1来编程，高级编程语言被发明出来后，程序员编写的高级语言，经过相应的编译器编译后变成计算机认识的0和1，这样就搭建了开发者与计算机沟通的桥梁。</p>
<figure data-type="image" tabindex="3"><img src="https://yujava.github.io/post-images/1585293730796.png" alt="" loading="lazy"></figure>
<p>参考<br>
计算机原理：https://blog.csdn.net/cc_net/article/details/10418711<br>
计算机硬件/软件：https://baike.baidu.com/<br>
通俗易懂揭秘了计算机由来：&lt;编码的奥秘&gt;<br>
Java Tutorials：https://www.guru99.com/java-platform.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA入行攻略]]></title>
        <id>https://yujava.github.io/post/java-index/</id>
        <link href="https://yujava.github.io/post/java-index/">
        </link>
        <updated>2020-03-27T01:42:51.000Z</updated>
        <content type="html"><![CDATA[<p>写在前面的废话：早在18年，本人就有意发表相关教程（或博客或自己录制视频等方式），来帮助更多想通过自身努力入行JAVA行业非计算机专业的学弟学妹们。无奈工作原因，导致这件事情一直搁置着；如今有幸入职一家加班少的公司，终于能在下班之余抽空来完成18年未完成的计划。</p>
<p>众所周知，得益于互联网的高速发展，近些年IT行业的福利待遇水涨船高。对于咱们既没有好的创业条件或者机会，又没有什么社会资源（主要是家庭背景和人脉关系）刚毕业的学生来说，选择一个好的行业至关重要。在这里我向那些<code>没有就读计算机相关专业的朋友（无论是大专还是本科生或初高中辍学）</code>提供几条入行IT行业的建议；如果你认同，欢迎与我交流，不认同的朋友，麻烦不要喷。</p>
<pre><code>培训学校
自学
通过国家举行的考试（比如成人高考、专升本、考研等）考进理想学校并选计算机相关专业
自学+行内人士（有熟人从事IT行业）指导
</code></pre>
<h2 id="四种方式的利弊">四种方式的利弊。</h2>
<p>从个人角度分析</p>
<h3 id="1-培训学校">1. 培训学校</h3>
<p>首先，我觉得培训学校最大的好处是稳妥、省心，之所以说她稳妥是因为有专业的老师给你上课，你只要跟着老师的学习路线走，直到毕业就业为止。省心主要体现当你遇到学习难题，在校期间可随时跟老师沟通，可以快速解答你的难题。</p>
<blockquote>
<p>凡是都有利弊，培训学校也不是完美的。培训学校的弊端之一是高额的费用，以北大青鸟2010年JAVA培训的收费情况为例，为期1年半的培训总学费将近4万元，加上购买笔记本电脑（5000左右）、资料费、伙食费学完到就业至少准备5万元费用。<br>
相比费用，我觉得培训学校最大的弊端是很多学生缺乏自学能力的培养，读过大学的朋友都知道，到了大学一个辅导员可能带好几个班，给你上课的老师也不在是固定的那几个，大学生涯学生们能有多少成长很大程度看自己的自我管理和自我学习能力。<code>自学能力是决定你踏入社会后能否在短时间里有明显进步的重要因素，特别是咱们搞IT的，技术的更迭非常快，你只有不断的给自己充电才能保证不被行业淘汰</code>。当然并不是说培训学校的学生没有自学能力，只是她的这种跟义务教育类似的授课模式导致学生们缺乏了自学能力的锻炼。</p>
</blockquote>
<h3 id="2-自学">2. 自学</h3>
<p>我们再来看自学，与培训学校是完全相反的一种方式，首先是0费用（现在网上有各种免费的教学视频），另一个就是对自学能力极大的提升，因为当你遇到问题除了百度/谷歌以外，就得靠自己去解决。</p>
<blockquote>
<p>自学也有她的弊端，首先她需要比较强的自学能力和足够的耐心去面对学习过程遇到的难题。最大的难题就是自学完成后如何就业，在这里我要提醒一下，会写代码并不等于可以找到与之匹配的工作。<br>
你得通过企业发起的面试邀请。<code>面试也是一门学问，分为好几个步骤，从写简历到投递简历、技术面试（有的公司分为笔试和面试，面试可能又分为初试、复试等）、HR面谈、谈薪、入职</code>；如果你是非计算机毕业或者没有读过培训学校，这里面每个环节都得靠自己去摸索。<br>
众多环节中，你遇到某一个问题可能导致你想放弃从事IT行业的决心；比如，没有面试电话（可能是简历写得不好、或学历不够、或投递的方式不正确）；技术面试总通过不了；技术通过了，但是HR面谈挂了；技术通过了，HR面谈也没问题，谈薪谈崩了；所有面试都过了，入职资料备不齐，入职失败；<br>
当我写到这里，同行的同事可能会笑话我，只要技术面试通过，肯定能拿到offer（入职通知书），我想说的是，上面我说的每种情况都不是胡编乱造危言耸听的，因为确确实实每种情况都在我身上发生过。<br>
<code>这在里我再次强调，本篇教程针对的是非计算机专业（大专/本科/初高中辍学）的朋友</code>，如果你是计算机相关专业科班出身或曾经就读过培训学校的朋友不认同我的说法，是很正常的，据我所知，培训学校在最后一个学期专门做就业指导，而大部分计算机班科出身的学生都能通过校招环节找到实习工作。所以他们可能不需要独自去了解这些东西，他们可能只要按部就班就能顺利入行IT行业。</p>
</blockquote>
<h3 id="3-国考">3. 国考</h3>
<p>通过国家举行的考试（比如成人高考、专升本、考研等）考进理想学校并选计算机相关专业<br>
可能大家会觉得通过国考的方式考入理想学校就读计算机专业这种特殊的方式，根本就是开玩笑，花这个时间精力和成本是就读培训学校或自学的很多倍；没错，这种方式确实是很需要高昂的成本，首先得像高考一样去复习，然后又参加一次&quot;高考&quot;，还不一定一次就能考得上。考上后时间成本，读书学费等成本都是不小的开销。</p>
<blockquote>
<p>凡是都有两面性，这种方式也有她的好处，最显而易见的是不管通过哪种国考方式入学毕业后，你的学历<br>
肯定是有所提升（很多大企业对学历一直都很重视）；<br>
学历是实实在在看的见的提升，<code>还有一些潜藏于心、不容易被发掘的部分，比如：入学理想大学就读计算机相关专业，更全面、更系统掌握计算机知识，为以后的自我提升打下坚实基础</code>；<br>
另一个你就读更好的学校，<code>你认识的老师、同学相对以前大概率是更优秀的，这对你以后步入社会能获得更多机会提供了条件</code>。说到这里，很多朋友想知道就读培训学校和大学对应专业到底有什么不同。这里不做任何评价，我只列举一个培训学校安排的课程与大学对应专业做对比，大家自己去品。</p>
</blockquote>
<p>以武汉大学计算机科学与技术专业为例</p>
<blockquote>
<p>计算机科学导论、数字逻辑、高级语言程序设计、离散数学、数据结构、计算机组成与设计、操作系统、云计算平台与技术[学科基础（平台）课程]<br>
数据库系统、计算机网络、编译原理、软件工程、算法设计与分析、嵌入式系统、数字逻辑课程设计、计算机组成与设计课程设计、操作系统课程设计、计算机网络课程设计、大型应用软件课程设计等[其他主干课程]</p>
</blockquote>
<p>以传智播客(黑马程序员)培训学校培训javaEE为例</p>
<blockquote>
<p>Java基础语法、面向对象基础、API基础	、集合基础（JavaEE基础班课程）；异常、IO、多线程、网络编程、Lambda、反射（Java语言进阶）；<br>
Git、Linux、HTML5&amp;CSS&amp;Nginx、Servlet、Cookie&amp;Session、MySQL、JDBC、MyBatis、JavaScript、VUE、ElementUI+案例、Redis、Maven（JavaWeb）；Spring、SpringMVC、Zookeeper、Dubbo、Spring Boot、Spring Cloud、RabbitMQ、Elasticsearch（框架阶段）；项目实战</p>
</blockquote>
<p>从两者课程安排来看，个人觉得培训学校几乎全部都是工作中应用技术，而大学是培养学生对本专业系统而深刻的认识（知其然知其所以然）。关于培训学校和大学科班专业的区别，有兴趣的朋友可在网上百度，多看些评论，自己慢慢细品</p>
<h3 id="4自学指导">4.自学+指导</h3>
<p>主要靠自学，不懂的向行内人士（有熟人从事IT行业）请教<br>
最后一种方式，是较上面三种方式比较趋中的一种，也是我个人比较推荐的一种；既培养了自学能力又能在学习或找工作过程中遇到困难而不会孤立无助（没有从事IT熟人的朋友，可与我联系，我会利用下班空闲时间帮大家，解答学习或面试遇到的问题，已助大家早日找到心仪的工作）。</p>
<h2 id="总结">总结</h2>
<p>如果时间充裕且条件允许<code>并对编程很感兴趣</code>，推荐第三种方式通过国考方式进入理想学校并选计算机相关专业；<br>
如果想省心，能准备几万的学费，可选第一种报名培训学校；<br>
如果想省一笔不小的培训费，并且培养自己的自学能力选择，第四种方式自学+行内人士指导（没有熟人的可与我联系，通过下班空闲时间传授JAVA知识或面试经验，当然会适当收取少许费用，<code>保证就业，找不到工作费用全免，总费用不及培训学校十分之一，针对贫困且好学的朋友，可免费指导教学</code>）是非常好的选择。<br>
如果对自己的自学能力足够自信，并有遇到困难不放弃的决心，第二种方式自学也是不错的选择</p>
]]></content>
    </entry>
</feed>